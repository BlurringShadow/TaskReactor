// <auto-generated />
using System;
using ApplicationDomain.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApplicationDomain.Models.Database.Migrations
{
    [DbContext(typeof(TaskReactorDbContext))]
    partial class TaskReactorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("ApplicationDomain.Models.Database.Entity.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("DurationOfOneTime")
                        .HasColumnType("Integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("Integer");

                    b.Property<int>("FromTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("Integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FromTaskId");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("ApplicationDomain.Models.Database.Entity.TaskDependency", b =>
                {
                    b.Property<int>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DependencyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TargetId", "DependencyId");

                    b.HasIndex("DependencyId");

                    b.ToTable("TaskDependency");
                });

            modelBuilder.Entity("ApplicationDomain.Models.Database.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ApplicationDomain.Models.Database.Entity.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("Integer");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("Integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("UserTask");
                });

            modelBuilder.Entity("ApplicationDomain.Models.Database.Entity.Goal", b =>
                {
                    b.HasOne("ApplicationDomain.Models.Database.Entity.UserTask", "FromTask")
                        .WithMany("Goals")
                        .HasForeignKey("FromTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ApplicationDomain.Models.Database.Entity.Interval", "Interval", b1 =>
                        {
                            b1.Property<int>("GoalId")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Kind")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Value")
                                .HasColumnType("INTEGER");

                            b1.HasKey("GoalId");

                            b1.ToTable("Goal");

                            b1.WithOwner()
                                .HasForeignKey("GoalId");
                        });
                });

            modelBuilder.Entity("ApplicationDomain.Models.Database.Entity.TaskDependency", b =>
                {
                    b.HasOne("ApplicationDomain.Models.Database.Entity.UserTask", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDomain.Models.Database.Entity.UserTask", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationDomain.Models.Database.Entity.UserTask", b =>
                {
                    b.HasOne("ApplicationDomain.Models.Database.Entity.User", "OwnerUser")
                        .WithMany("Tasks")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
